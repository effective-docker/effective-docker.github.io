<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Effective Docker Blog</title>
		<description>Docker aus der Praxis für die Praxis</description>
		<link>https://effective-docker.github.io</link>
		<atom:link href="https://effective-docker.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Chaos Tests</title>
				
				
					<description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;chaos-testing&quot;&gt;Chaos Testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In verteilten Systemen können wir Fehler niemals ausschließen. Die möglichen Fehlerquellen sind fast unendlich.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;partieller oder totaler Netzwerkausfall&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Datenbankprobleme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anwendungen / Services sind kurzfristig / langfristig nicht verfügbar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastprobleme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sicherheit / Firewall / ungültige Zertifkate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Resilient Software&lt;/strong&gt; sollte so geschrieben sein, dass Fehler akzeptiert werden und der Aufrufer noch zumindest teilweise das System bedienen kann.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Netflix&lt;/strong&gt; hat mit seiner Werkzeug-Box &lt;a href=&quot;https://github.com/Netflix/SimianArmy&quot;&gt;SimianArmy&lt;/a&gt; Tools für das Chaos-Testing erstellt und damit &lt;strong&gt;Chaos-Testing&lt;/strong&gt; salonfähig gemacht.
Chaos-Testing folgt den &lt;a href=&quot;http://principlesofchaos.org/&quot;&gt;Prinzipien des Chaos&lt;/a&gt;.
Beispielsweise fährt Chaos-Monkey durch Zufall ausgewählte Server-Instanzen herunter, genau wie ein Affe, der wahllos Kabel zieht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Warum macht Netflix das? Weil nur dann sichergestellt ist, dass ein System auch dann funktioniert, wenn Upstream-Services nicht verfügbar* sind. Ein Entwickler kann sich niemals darauf verlassen, dass der Service, den er gerade aufruft auch verfügbar ist - &lt;strong&gt;Chaos&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
				<pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
				<link>https://effective-docker.github.io/pumba-chaos-testing/</link>
				<guid isPermaLink="true">https://effective-docker.github.io/pumba-chaos-testing/</guid>
			</item>
		
			<item>
				<title>Docker Swarm Health Checks</title>
				
				
					<description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker-swarm-mode-health-checks&quot;&gt;Docker Swarm Mode Health Checks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tldr&quot;&gt;TLDR;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Die Sourcen sind unter : &lt;a href=&quot;https://github.com/effective-docker/docker-healthcheck.git&quot; class=&quot;bare&quot;&gt;https://github.com/effective-docker/docker-healthcheck.git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swarm Scheduler arbeitet mit den Container Health Checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nur &lt;em&gt;healthy&lt;/em&gt; Container werden geroutet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nach drei fehlgeschlagenen Health-Checks wird ein Container neu gestartet (ggf. auch auf einem anderen Knoten)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker-swarm-mode&quot;&gt;Docker Swarm Mode&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im &lt;a href=&quot;https://effective-docker.github.io/docker-healthchecks/&quot;&gt;letzten Eintrag&lt;/a&gt; haben wir uns mit &lt;em&gt;Health Checks&lt;/em&gt; in Containern beschäftigt. Das alleine ist schon eine sehr wichtige Funktionalität, entwickelt ihr Potential allerdings erst in Zusammenarbeit mit einem Scheduler der das aktiv unterstützt. In diesem Artikel konzentrieren wir uns auf &lt;strong&gt;Docker Swarm im Swarm Mode (ab 1.12)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
				<pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
				<link>https://effective-docker.github.io/docker-swarm-health-checks/</link>
				<guid isPermaLink="true">https://effective-docker.github.io/docker-swarm-health-checks/</guid>
			</item>
		
			<item>
				<title>Docker Health Checks</title>
				
				
					<description>&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker-health-checks&quot;&gt;Docker Health Checks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tldr&quot;&gt;TLDR;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Die Sourcen sind unter : &lt;a href=&quot;https://github.com/effective-docker/docker-healthcheck.git&quot; class=&quot;bare&quot;&gt;https://github.com/effective-docker/docker-healthcheck.git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seit Docker 1.12 gibt es die Möglichkeit, Health-Checks für Container zu definieren&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Health-Checks sind vor allem zusammen mit Swarm hochinteressant: &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#/healthcheck&quot; class=&quot;bare&quot;&gt;https://docs.docker.com/engine/reference/builder/#/healthcheck&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker-container-health-checks&quot;&gt;Docker Container Health Checks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anwendungen zu deployen ist &lt;em&gt;einfach&lt;/em&gt;, und Docker Container zu starten ist noch &lt;em&gt;einfacher&lt;/em&gt;.
 Ein einfaches &lt;em&gt;docker run&lt;/em&gt; und schon sind wir live. Das funktioniert
 auch eine ganze Zeit bis zum ersten Problem - sei es nun eine &lt;em&gt;Lastspitze&lt;/em&gt;, ein &lt;em&gt;Bug&lt;/em&gt;, ein Amoklaufender Prozess oder einfach ein &lt;em&gt;temporäres&lt;/em&gt; Netzwerkproblem.
 Die Anwendung ist nicht erreichbar, unsere &lt;em&gt;E-Commerce&lt;/em&gt;-Plattform ist für die Kunden nichts weiter als eine &lt;em&gt;500 - Wir arbeiten an einer Lösung&lt;/em&gt; und bis wir diese gefunden haben ist die Bestellung meistens schon bei der Konkurrenz gelandet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
				<pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
				<link>https://effective-docker.github.io/docker-healthchecks/</link>
				<guid isPermaLink="true">https://effective-docker.github.io/docker-healthchecks/</guid>
			</item>
		
	</channel>
</rss>